// canvas Z-Index
var zIndex = 300;
var imgSize = 800;

var countFrame = 0;
var dataFrames = [];
var sampleFrames = [];

var dragObject = "";
dragging = false;

let sectionIndex = 0;

// --- DOM ACTIONS --- //
var nextBtn;
var prevBtn;
var saveBtn;

// handle arrows actions

function keyPressed() 
{
  if (keyCode === LEFT_ARROW) 
  {
    return next();
  } 
  else if (keyCode === RIGHT_ARROW) 
  {
	  return prev();
  }
}

function nextWindow()
{
	document.getElementById("title-" + sectionIndex).style.display = "";
	
	sectionIndex += 1;
	countFrame = 0;
	
	document.getElementById("title-" + sectionIndex).style.display = "none";
	
	if (sectionIndex == 2)
	{
		document.getElementById("next_window").style.display = "none";
	}
}

// puase the simulation draw loop and manage the control buttons 
function prev()
{
	if (countFrame != 0)
	{
		countFrame--;
	}
	openCloseBtns();
	dataFrames[countFrame].print(true);
}

// start the simulation draw loop and manage the control buttons 
function next()
{
	if (dataFrames.length - 1 != countFrame)
	{
		countFrame++;
	}
	openCloseBtns();
	dataFrames[countFrame].print(true);
}

// start the simulation draw loop and manage the control buttons 
function saveTags()
{
	var answer = "";
	for (var i = 0; i < dataFrames.length; i++)
	{
		answer += dataFrames[i].toString() + ",";
	}
	answer = answer.substring(0, answer.length - 1);
	downloadasTextFile("gt_skeletons.json", answer);
}

function openCloseBtns()
{
	if (countFrame == 0)
	{
		// close and open buttons 
		document.getElementById("prev").disabled = true;
	}
	else
	{
		document.getElementById("prev").disabled = false;
	}
	if (countFrame == dataFrames.length - 1)
	{
		// close and open buttons 
		document.getElementById("next").disabled = true;
	}
	else
	{
		document.getElementById("next").disabled = false;
	}
	console.log("Frame Index #" + (1 + countFrame));
}

// --- END DOM ACTIONS --- //


// ------------------- END OF GLOBAL VARS ------------------------ // 

let skeletons = [[682.5520782470703, 1370.0000610351562, 549.5520782470703, 1423.6666870117188, 567.5520782470703, 1218.5555725097656, 551.5520782470703, 1205.5555725097656, 574.5520782470703, 1316.6666870117188, 567.5520782470703, 1293.6666870117188, 604.5520782470703, 1192.5555725097656, 663.5520782470703, 1190.5555725097656, 585.5520782470703, 1128.5555725097656, 642.5520782470703, 1108.5555725097656, 671.5520782470703, 1234.6666870117188, 601.5520782470703, 1050.5555725097656],
				[640.5520782470703, 1376.6666870117188, 548.5520782470703, 1419.6666870117188, 533.5520782470703, 1214.6666870117188, 527.5520782470703, 1197.6666870117188, 563.5520782470703, 1309.6666870117188, 542.5520782470703, 1288.6666870117188, 581.5520782470703, 1187.6666870117188, 631.5520782470703, 1192.6666870117188, 585.5520782470703, 1130.4444580078125, 615.5520782470703, 1117.6666870117188, 653.5520782470703, 1248.6666870117188, 588.5520782470703, 1050.6666870117188],
				[544.5520782470703, 1416.6666870117188, 520.5520782470703, 1416.6666870117188, 467.5520782470703, 1142.6666870117188, 447.5520782470703, 1140.6666870117188, 513.5520782470703, 1300.6666870117188, 505.5520782470703, 1316.6666870117188, 508.5520782470703, 1184.6666870117188, 553.5520782470703, 1188.6666870117188, 552.5520782470703, 1126.6666870117188, 589.5520782470703, 1120.6666870117188, 601.5520782470703, 1239.6666870117188, 570.5520782470703, 1057.6666870117188],
				[541.5520782470703, 1413.6666870117188, 512.5520782470703, 1412.6666870117188, 470.5520782470703, 1029.6666870117188, 459.5520782470703, 1026.6666870117188, 482.5520782470703, 1321.6666870117188, 482.5520782470703, 1322.6666870117188, 450.5520782470703, 1126.6666870117188, 481.5520782470703, 1109.6666870117188, 522.5520782470703, 1107.6666870117188, 570.5520782470703, 1104.6666870117188, 570.5520782470703, 1231.6666870117188, 551.5520782470703, 1047.6666870117188],
				[549.5520782470703, 1408.77783203125, 509.5520782470703, 1407.77783203125, 508.5520782470703, 963.77783203125, 499.5520782470703, 964.77783203125, 502.5520782470703, 1297.77783203125, 473.5520782470703, 1298.77783203125, 437.5520782470703, 1040.77783203125, 472.5520782470703, 1029.77783203125, 518.5520782470703, 1053.77783203125, 551.5520782470703, 1057.77783203125, 535.5520782470703, 1198.77783203125, 541.5520782470703, 998.77783203125],
				[525.5520782470703, 1389.6666870117188, 491.5520782470703, 1377.6666870117188, 493.5520782470703, 897.6666870117188, 492.5520782470703, 899.6666870117188, 510.5520782470703, 1247.6666870117188, 479.5520782470703, 1250.6666870117188, 435.5520782470703, 976.6666870117188, 469.5520782470703, 959.6666870117188, 499.5520782470703, 989.6666870117188, 541.5520782470703, 983.6666870117188, 525.5520782470703, 1130.6666870117188, 538.5520782470703, 943.6666870117188],
				[494.5520782470703, 1355.5556030273438, 485.5520782470703, 1352.5556030273438, 463.5520782470703, 822.5556030273438, 453.5520782470703, 832.5556030273438, 502.5520782470703, 1207.5556030273438, 484.5520782470703, 1207.5556030273438, 428.5520782470703, 926.5556030273438, 469.5520782470703, 901.5556030273438, 477.5520782470703, 962.5556030273438, 519.5520782470703, 952.5556030273438, 520.5520782470703, 1097.5556030273438, 528.5520782470703, 917.5556030273438],
				 [483.5520782470703, 1350.4444580078125, 467.5520782470703, 1346.4444580078125, 420.5520782470703, 810.4444580078125, 393.5520782470703, 834.4444580078125, 502.5520782470703, 1205.4444580078125, 472.5520782470703, 1207.4444580078125, 447.5520782470703, 891.4444580078125, 459.5520782470703, 886.4444580078125, 479.5520782470703, 954.4444580078125, 520.5520782470703, 951.4444580078125, 507.5520782470703, 1101.4444580078125, 517.5520782470703, 906.4444580078125],
				[475.5520782470703, 1377.6666870117188, 468.5520782470703, 1372.6666870117188, 417.5520782470703, 839.6666870117188, 394.5520782470703, 846.6666870117188, 494.5520782470703, 1230.6666870117188, 463.5520782470703, 1230.6666870117188, 438.5520782470703, 914.6666870117188, 452.5520782470703, 908.6666870117188, 477.5520782470703, 967.6666870117188, 513.5520782470703, 971.6666870117188, 497.5520782470703, 1098.6666870117188, 508.5520782470703, 927.6666870117188],
				[503.5520782470703, 1413.5556030273438, 452.5520782470703, 1408.5556030273438, 415.5520782470703, 880.5556030273438, 392.5520782470703, 881.5556030273438, 478.5520782470703, 1276.5556030273438, 448.5520782470703, 1270.5556030273438, 435.5520782470703, 951.5556030273438, 451.5520782470703, 948.5556030273438, 470.5520782470703, 1016.5556030273438, 518.5520782470703, 1022.5556030273438, 495.5520782470703, 1149.5556030273438, 508.5520782470703, 967.5556030273438],
				 [507.5520782470703, 1418.77783203125, 480.5520782470703, 1417.77783203125, 423.5520782470703, 914.6666870117188, 393.5520782470703, 923.6666870117188, 455.5520782470703, 1305.77783203125, 432.5520782470703, 1310.77783203125, 429.5520782470703, 984.6666870117188, 439.5520782470703, 983.6666870117188, 467.5520782470703, 1043.6666870117188, 500.5520782470703, 1051.6666870117188, 483.5520782470703, 1178.77783203125, 505.5520782470703, 996.6666870117188]];
let balls = [[550, 1213],
			[511, 1210],
			[445, 1140],
			[460, 1026],
			[511, 961],
			[500, 900],
			[458, 827],
			[365, 717],
			[255, 621],
			[163, 560],
			[71, 518]];
			

let skeletons2 = [[654.5520782470703, 1379.5556030273438, 524.5520782470703, 1428.5556030273438, 498.5520782470703, 1195.5556030273438, 485.5520782470703, 1196.5556030273438, 538.5520782470703, 1307.5556030273438, 510.5520782470703, 1307.5556030273438, 567.5520782470703, 1188.5556030273438, 587.5520782470703, 1189.5556030273438, 558.5520782470703, 1121.5556030273438, 593.5520782470703, 1106.5556030273438, 618.5520782470703, 1236.5556030273438, 557.5520782470703, 1049.5556030273438],
[654.5520782470703, 1379.5556030273438, 524.5520782470703, 1428.5556030273438, 498.5520782470703, 1195.5556030273438, 485.5520782470703, 1196.5556030273438, 538.5520782470703, 1307.5556030273438, 510.5520782470703, 1307.5556030273438, 567.5520782470703, 1188.5556030273438, 587.5520782470703, 1189.5556030273438, 558.5520782470703, 1121.5556030273438, 593.5520782470703, 1106.5556030273438, 618.5520782470703, 1236.5556030273438, 557.5520782470703, 1049.5556030273438],
				[633.5520782470703, 1383.77783203125, 520.5520782470703, 1416.6666870117188, 471.5520782470703, 1197.77783203125, 471.5520782470703, 1193.77783203125, 521.5520782470703, 1303.77783203125, 505.5520782470703, 1316.6666870117188, 547.5520782470703, 1199.77783203125, 573.5520782470703, 1194.77783203125, 552.5520782470703, 1126.6666870117188, 582.5520782470703, 1103.77783203125, 613.5520782470703, 1234.77783203125, 541.5520782470703, 1055.77783203125],
				[571.5520782470703, 1420.5556030273438, 514.5520782470703, 1417.5556030273438, 428.5520782470703, 1116.5556030273438, 421.5520782470703, 1120.5556030273438, 495.5520782470703, 1312.5556030273438, 482.5520782470703, 1322.6666870117188, 482.5520782470703, 1182.5556030273438, 500.5520782470703, 1171.5556030273438, 529.5520782470703, 1111.5556030273438, 570.5520782470703, 1104.6666870117188, 583.5520782470703, 1247.5556030273438, 539.5520782470703, 1048.5556030273438],
				 [561.5520782470703, 1425.4444580078125, 518.5520782470703, 1417.4444580078125, 455.5520782470703, 1014.4444580078125, 443.5520782470703, 1000.4444580078125, 485.5520782470703, 1318.4444580078125, 461.5520782470703, 1318.4444580078125, 434.5520782470703, 1105.4444580078125, 457.5520782470703, 1099.4444580078125, 515.5520782470703, 1097.4444580078125, 545.5520782470703, 1096.4444580078125, 552.5520782470703, 1232.4444580078125, 534.5520782470703, 1022.4444580078125],
				[560.5520782470703, 1420.77783203125, 515.5520782470703, 1414.77783203125, 490.5520782470703, 944.77783203125, 489.5520782470703, 941.77783203125, 494.5520782470703, 1297.77783203125, 465.5520782470703, 1294.77783203125, 429.5520782470703, 1030.77783203125, 455.5520782470703, 1008.77783203125, 507.5520782470703, 1038.77783203125, 545.5520782470703, 1040.77783203125, 538.5520782470703, 1177.77783203125, 541.5520782470703, 978.77783203125],
				 [541.5520782470703, 1393.888916015625, 494.5520782470703, 1389.888916015625, 488.5520782470703, 875.5555725097656, 480.5520782470703, 871.5555725097656, 510.5520782470703, 1255.5555725097656, 481.5520782470703, 1245.5555725097656, 424.5520782470703, 966.5555725097656, 459.5520782470703, 948.5555725097656, 485.5520782470703, 982.5555725097656, 535.5520782470703, 978.5555725097656, 519.5520782470703, 1120.5555725097656, 529.5520782470703, 929.5555725097656],
				 [494.5520782470703, 1367.6666870117188, 487.5520782470703, 1360.6666870117188, 437.5520782470703, 810.6666870117188, 451.5520782470703, 809.6666870117188, 499.5520782470703, 1218.6666870117188, 477.5520782470703, 1218.6666870117188, 425.5520782470703, 914.6666870117188, 452.5520782470703, 890.6666870117188, 479.5520782470703, 954.4444580078125, 520.5520782470703, 951.4444580078125, 507.5520782470703, 1101.4444580078125, 525.5520782470703, 899.6666870117188],
				[475.5520782470703, 1377.6666870117188, 468.5520782470703, 1372.6666870117188, 412.5520782470703, 813.5556030273438, 385.5520782470703, 828.5556030273438, 494.5520782470703, 1230.6666870117188, 467.5520782470703, 1231.5556030273438, 452.5520782470703, 901.5556030273438, 452.5520782470703, 905.5556030273438, 472.5520782470703, 945.5556030273438, 518.5520782470703, 947.5556030273438, 500.5520782470703, 1097.5556030273438, 515.5520782470703, 908.5556030273438],
				[479.5520782470703, 1394.6666870117188, 461.5520782470703, 1392.6666870117188, 412.5520782470703, 831.6666870117188, 391.5520782470703, 832.6666870117188, 487.5520782470703, 1252.6666870117188, 461.5520782470703, 1273.6666870117188, 437.5520782470703, 908.6666870117188, 444.5520782470703, 914.6666870117188, 471.5520782470703, 972.6666870117188, 515.5520782470703, 969.6666870117188, 495.5520782470703, 1149.5556030273438, 511.5520782470703, 926.6666870117188],
				[507.5520782470703, 1418.77783203125, 470.5520782470703, 1416.4444580078125, 421.5520782470703, 874.4444580078125, 389.5520782470703, 888.4444580078125, 471.5520782470703, 1296.4444580078125, 440.5520782470703, 1296.4444580078125, 441.5520782470703, 951.4444580078125, 445.5520782470703, 955.4444580078125, 472.5520782470703, 1011.4444580078125, 510.5520782470703, 1015.4444580078125, 485.5520782470703, 1155.4444580078125, 505.5520782470703, 975.4444580078125]];
let balls2 = [[490, 1193],
			[490, 1193],
			[470, 1194],
			[420, 1100],
			[448, 1006],
			[492, 940],
			[482, 878],
			[444, 801],
			[347, 694],
			[247, 609],
			[148, 542]];

function preload() 
{
	// gt 
	for (var index = 1; index <= 11; index++)
	{
		var dataIndex = index - 1;
		var img = loadImage('img/image' + index + '.jpg');
		img.resize(imgSize, imgSize);
		try
		{
			var skeleton = Skeleton.fromJsonString(skeletons[dataIndex]);	
		}
		catch (error)
		{
		
			var skeleton = new Skeleton(skeletons[dataIndex][0],
										skeletons[dataIndex][1],
										skeletons[dataIndex][2],
										skeletons[dataIndex][3],
										skeletons[dataIndex][4],
										skeletons[dataIndex][5],
										skeletons[dataIndex][6],
										skeletons[dataIndex][7],
										skeletons[dataIndex][8],
										skeletons[dataIndex][9],
										skeletons[dataIndex][10],
										skeletons[dataIndex][11],
										skeletons[dataIndex][12],
										skeletons[dataIndex][13],
										skeletons[dataIndex][14],
										skeletons[dataIndex][15],
										skeletons[dataIndex][16],
										skeletons[dataIndex][17],
										skeletons[dataIndex][18],
										skeletons[dataIndex][19],
										skeletons[dataIndex][20],
										skeletons[dataIndex][21],
										skeletons[dataIndex][22],
										skeletons[dataIndex][23]);
		}
		
		var ball = new Ball(balls[dataIndex][0], balls[dataIndex][1]);
		dataFrames.push(new imageSkeleton(img, skeleton, ball, "image" + index + ".jpg"));
	}
	
	// sample
	for (var index = 1; index <= 11; index++)
	{
		var dataIndex = index - 1;
		var img = loadImage('img/not_gt/image' + index + '.jpg');
		img.resize(imgSize, imgSize);
		try
		{
			var skeleton = Skeleton.fromJsonString(skeletons[dataIndex]);	
		}
		catch (error)
		{
		
			var skeleton = new Skeleton(skeletons2[dataIndex][0],
										skeletons2[dataIndex][1],
										skeletons2[dataIndex][2],
										skeletons2[dataIndex][3],
										skeletons2[dataIndex][4],
										skeletons2[dataIndex][5],
										skeletons2[dataIndex][6],
										skeletons2[dataIndex][7],
										skeletons2[dataIndex][8],
										skeletons2[dataIndex][9],
										skeletons2[dataIndex][10],
										skeletons2[dataIndex][11],
										skeletons2[dataIndex][12],
										skeletons2[dataIndex][13],
										skeletons2[dataIndex][14],
										skeletons2[dataIndex][15],
										skeletons2[dataIndex][16],
										skeletons2[dataIndex][17],
										skeletons2[dataIndex][18],
										skeletons2[dataIndex][19],
										skeletons2[dataIndex][20],
										skeletons2[dataIndex][21],
										skeletons2[dataIndex][22],
										skeletons2[dataIndex][23]);
		}
		skeleton.close_editing();
		var ball = new Ball(balls2[dataIndex][0], balls2[dataIndex][1]);
		sampleFrames.push(new imageSkeleton(img, skeleton, ball, "image" + index + ".jpg"));
	}
}

// setup all the simulation before starting 
function setup()
{
	var cnv = createCanvas(1024, 1820);
	cnv.parent('game');
	// setup for simulation
	frameRate(24);
	dataFrames[countFrame].print(true);
}

// loop run on the simulation
function draw() 
{
	background(255);
	if (sectionIndex == 0) // gt
	{
		dataFrames[countFrame].print();
		
		textSize(22);
		fill(255);
		text("Frame " + (1 + countFrame) + " / " + dataFrames.length, 20, 30);
	
		if(dragging)
		{
			dataFrames[countFrame].set_new_point(dragObject, mouseX, mouseY);
		}
	}
	else if (sectionIndex == 1) // sample
	{
		sampleFrames[countFrame].print();
		
		textSize(22);
		fill(255);
		text("Frame " + (1 + countFrame) + " / " + sampleFrames.length, 20, 30);
	
		if(dragging)
		{
			sampleFrames[countFrame].set_new_point(dragObject, mouseX, mouseY);
		}
	}
	else // if (sectionIndex == 2) comparision
	{
		background(79, 121, 66);
		sampleFrames[countFrame].skeleton.print();
		dataFrames[countFrame].skeleton.print();
	}
}

/*when mouse is pressed, 
check if mouse is intersecting w/ circle */
function mousePressed() {
  console.log("Pressed on: x = " + mouseX + ", y = " + mouseY);
  dragging = true;
  dragObject = dataFrames[countFrame].on_point(mouseX, mouseY);
}

function mouseReleased(){
  dragging = false;
}

// download a .txt file into your computer
function downloadasTextFile(filename, text) 
{
	var element = document.createElement('a');
	element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
	element.setAttribute('download', filename);	
	element.style.display = 'none';
	document.body.appendChild(element);
	element.click();	
	document.body.removeChild(element);
}